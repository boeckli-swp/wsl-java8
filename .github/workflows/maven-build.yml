# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Maven Build

on:
  workflow_dispatch:
  push:
    branches: [ "master", "feature/**" ]
  pull_request:
    branches: [ "master" ]

jobs:
  
  setup:
    
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      
    outputs:
      BRANCH_MVN_VERSION: ${{ steps.set_version.outputs.BRANCH_MVN_VERSION }}
      GIT_BRANCH: ${{ steps.set_version.outputs.GIT_BRANCH }}
      
    steps:
      - uses: actions/checkout@v3
      
      # This action installs the given version of the JDK into the PATH, and also sets up a Maven settings.xml for publishing the package to GitHub Packages. 
      # The generated settings.xml defines authentication for a server with an id of github, using the GITHUB_ACTOR environment variable as the username and 
      # the GITHUB_TOKEN environment variable as the password. The GITHUB_TOKEN environment variable is assigned the value of the special GITHUB_TOKEN secret.
      # See: https://github.com/actions/setup-java
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml.
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Set Maven Versions
        id: set_version
        run: |
          # make file runnable, might not be necessary
          chmod +x "${GITHUB_WORKSPACE}/.github/workflows/scripts/set_mvn_version.sh"
          # run set version script
          "${GITHUB_WORKSPACE}/.github/workflows/scripts/set_mvn_version.sh"  
  
  build:

    runs-on: ubuntu-latest
    
    needs: [setup]
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - uses: actions/checkout@v3
      
    # This action installs the given version of the JDK into the PATH, and also sets up a Maven settings.xml for publishing the package to GitHub Packages. 
    # The generated settings.xml defines authentication for a server with an id of github, using the GITHUB_ACTOR environment variable as the username and 
    # the GITHUB_TOKEN environment variable as the password. The GITHUB_TOKEN environment variable is assigned the value of the special GITHUB_TOKEN secret.
    # See: https://github.com/actions/setup-java
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml.
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        
    - name: Run Maven Deploy
      env:
        GITHUB_TOKEN: ${{ github.token }}
        BRANCH_MVN_VERSION: ${{needs.setup.outputs.BRANCH_MVN_VERSION}}
        GIT_BRANCH: ${{needs.setup.outputs.GIT_BRANCH}}
      run: |
        echo "### Build started for branch $GIT_BRANCH with version $BRANCH_MVN_VERSION"
        mvn -version
        mvn -B versions:set -DnewVersion="$BRANCH_MVN_VERSION"
        mvn -B deploy -s $GITHUB_WORKSPACE/settings.xml  
        
  deploy:
    
    runs-on: ubuntu-latest
    
    needs: [setup,build]
    
    steps:
    
    - name: Deploy
      env:
        BRANCH_MVN_VERSION: ${{needs.setup.outputs.BRANCH_MVN_VERSION}}
        GIT_BRANCH: ${{needs.setup.outputs.GIT_BRANCH}}
      run: |
        echo "Deploying Branch $GIT_BRANCH with version $BRANCH_MVN_VERSION"
        
  integration-test:
    
    runs-on: ubuntu-latest
    
    needs: [deploy]
    
    steps:

      - name: Test
        env:
          BRANCH_MVN_VERSION: ${{needs.setup.outputs.BRANCH_MVN_VERSION}}
          GIT_BRANCH: ${{needs.setup.outputs.GIT_BRANCH}}
        run: |
          echo "Testing Branch $GIT_BRANCH with version $BRANCH_MVN_VERSION"      
        
  quality-check:
    
    needs: [setup,build]
    
    runs-on: ubuntu-latest
    
    steps:

    - uses: actions/checkout@master

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml.
        settings-path: ${{ github.workspace }} # location for the settings.xml file  

    - name: Run Sonar Code Scan
      run: mvn clean verify sonar:sonar -Pcoverage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)


  security-check:
    
    needs: [setup,build]
    
    runs-on: ubuntu-latest
    
    steps:

    - uses: actions/checkout@master
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/maven-3-jdk-11@master
      continue-on-error: true # To make sure that SARIF upload gets called
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.sarif

    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
